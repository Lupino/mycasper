#!/bin/sh

# set -e

export PATH=/usr/bin:/usr/sbin:/bin:/sbin

mountpoint=/cdrom
LIVE_MEDIA_PATH=/boot/Ubuntu
export COW_DIR=
USERNAME=casper
USERFULLNAME="Live session user"
HOST=live
BUILD_SYSTEM=Custom

mkdir -p $mountpoint
tried=/tmp/tried

[ -f /etc/casper.conf ] && . /etc/casper.conf
export USERNAME USERFULLNAME HOST BUILD_SYSTEM

. /scripts/casper-helpers

if [ ! -f /casper.vars ]; then
    touch /casper.vars
fi

parse_cmdline() {
    for x in $(cat /proc/cmdline); do
        case $x in
            union=*)
                export UNIONFS="${x#union=}";;
            copy-on-write-path=*)
                export COPY_ON_WRITE_PATH="${x#copy-on-write-path=}";;
            ip*)
                STATICIP=${x#ip=}
                if [ "${STATICIP}" = "" ]; then
                    STATICIP="frommedia"
                fi
                export STATICIP ;;
            live-media-path=*)
                LIVE_MEDIA_PATH="${x#live-media-path=}"
                export LIVE_MEDIA_PATH
                echo "export LIVE_MEDIA_PATH=\"$LIVE_MEDIA_PATH\"" >> /etc/casper.conf ;;
        esac
    done
    if [ "${UNIONFS}" = "" ]; then
        export UNIONFS="aufs"
    fi
}

is_casper_path() {
    path=$1
    if [ -d "$path/$LIVE_MEDIA_PATH" ]; then
        if [ "$(echo $path/$LIVE_MEDIA_PATH/*.squashfs)" != "$path/$LIVE_MEDIA_PATH/*.squashfs" ] ||
            [ "$(echo $path/$LIVE_MEDIA_PATH/*.ext2)" != "$path/$LIVE_MEDIA_PATH/*.ext2" ] ||
            [ "$(echo $path/$LIVE_MEDIA_PATH/*.dir)" != "$path/$LIVE_MEDIA_PATH/*.dir" ]; then
            return 0
        fi
    fi
    return 1
}


get_backing_device() {
    case "$1" in
        *.squashfs|*.ext2)
            echo $(setup_loop "$1" "loop" "/sys/block/loop*")
            ;;
        *.dir)
            echo "directory"
            ;;
        *)
            panic "Unrecognized casper filesystem: $1"
            ;;
    esac
}

match_files_in_dir() {
    # Does any files match pattern $1 ?

    local pattern="$1"
    if [ "$(echo $pattern)" != "$pattern" ]; then
        return 0
    fi
    return 1
}

mount_images_in_directory() {
    directory="$1"
    rootmnt="$2"
    if match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.squashfs" ||
        match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.ext2" ||
        match_files_in_dir "$directory/$LIVE_MEDIA_PATH/*.dir"; then
        setup_unionfs "$directory/$LIVE_MEDIA_PATH" "$rootmnt"
    else
        :
    fi
}

is_nice_device() {
    sysfs_path="${1#/sys}"
    if /lib/udev/path_id "${sysfs_path}" | egrep -q "ID_PATH=(usb|pci-[^-]*-(ide|scsi|usb)|platform-orion-ehci|platform-mmc|platform-mxsdhci)"; then
        return 0
    fi
    if echo ${sysfs_path} | grep -q "^/block/dm-"; then
        return 0
    fi
    return 1
}


setup_unionfs() {
    image_directory="$1"
    rootmnt="$2"

    case ${UNIONFS} in
        aufs|unionfs)
            modprobe "${MP_QUIET}" -b ${UNIONFS} || true
            if ! cut -f2 /proc/filesystems | grep -q "^${UNIONFS}\$" && \
               [ -x /bin/unionfs-fuse ]; then
                UNIONFS="unionfs-fuse"
            fi
            ;;
    esac

    # run-init can't deal with images in a subdir, but we're going to
    # move all of these away before it runs anyway.  No, we're not,
    # put them in / since move-mounting them into / breaks mono and
    # some other apps.

    croot="/"

    # Let's just mount the read-only file systems first
    rofsstring=""
    rofslist=""
    if [ "${UNIONFS}" = "aufs" ]; then
        roopt="rr"
    elif [ "${UNIONFS}" = "unionfs-fuse" ]; then
        roopt="RO"
    else
        roopt="ro"
    fi

    mkdir -p "${croot}"
    for image_type in "ext2" "squashfs" "dir" ; do
        for image in "${image_directory}"/*."${image_type}"; do
            imagename=$(basename "${image}")
            if [ -d "${image}" ]; then
                # it is a plain directory: do nothing
                rofsstring="${image}=${roopt}:${rofsstring}"
                rofslist="${image} ${rofslist}"
            elif [ -f "${image}" ]; then
                backdev=$(get_backing_device "$image")
                fstype=$(get_fstype "${backdev}")
                if [ "${fstype}" = "unknown" ]; then
                    panic "Unknown file system type on ${backdev} (${image})"
                fi
                mkdir -p "${croot}/${imagename}"
                mount -t "${fstype}" -o ro,noatime "${backdev}" "${croot}/${imagename}" || panic "Can not mount $backdev ($image) on ${croot}/${imagename}" && rofsstring="${croot}/${imagename}=${roopt}:${rofsstring}" && rofslist="${croot}/${imagename} ${rofslist}"
            fi
        done
    done
    rofsstring=${rofsstring%:}

    mkdir -p /cow
    if [ "$COPY_ON_WRITE_PATH" == "" ];then
        cowdevice="tmpfs"
        cow_fstype="tmpfs"
        cow_mountopt="rw,noatime,mode=755"
        mount -t ${cow_fstype} -o ${cow_mountopt} ${cowdevice} /cow || panic "Can not mount $cowdevice on /cow"
    else
	    mkdir -p $mountpoint/$COPY_ON_WRITE_PATH
       	mount -n -o bind $mountpoint/$COPY_ON_WRITE_PATH /cow
    fi

    case ${UNIONFS} in
        unionfs-fuse)
            (ulimit -n 16384; unionfs-fuse -o cow -o noinitgroups -o default_permissions -o allow_other -o use_ino -o suid /cow=RW:$rofsstring "$rootmnt" || panic "${UNIONFS} mount failed")
            mkdir -p /dev/.initramfs/varrun
            pidof unionfs-fuse >> /dev/.initramfs/varrun/sendsigs.omit || true
            ;;
        *)
            mount -t ${UNIONFS} -o noatime,dirs=/cow=rw:$rofsstring ${UNIONFS} "$rootmnt" || panic "${UNIONFS} mount failed"
            ;;
    esac

    # move the first mount; no head in busybox-initramfs
    for d in $(mount -t squashfs | cut -d\  -f 3); do
        mkdir -p "${rootmnt}/rofs"
        if [ "${UNIONFS}" = unionfs-fuse ]; then
            mount -o bind "${d}" "${rootmnt}/rofs"
        else
            mount -o move "${d}" "${rootmnt}/rofs"
        fi
        break
    done
}

check_dev ()
{
    sysdev="${1}"
    devname="${2}"
    if [ -z "${devname}" ]; then
        devname=$(sys2dev "${sysdev}")
    fi

    if [ -d "${devname}" ]; then
        mount -o bind "${devname}" $mountpoint || continue
        if is_casper_path $mountpoint; then
            echo $mountpoint
            return 0
        else
            umount $mountpoint
        fi
    fi
    [ -e "$devname" ] || continue

    if [ -n "${LIVEMEDIA_OFFSET}" ]; then
        loopdevname=$(setup_loop "${devname}" "loop" "/sys/block/loop*" "${LIVEMEDIA_OFFSET}")
        devname="${loopdevname}" 
    fi

    fstype=$(get_fstype "${devname}")
    if is_supported_fs ${fstype}; then
        devuid=$(blkid -o value -s UUID "$devname")
        [ -n "$devuid" ] && grep -qs "\<$devuid\>" $tried && continue
        mount -t ${fstype} -o rw,noatime "${devname}" $mountpoint || continue
        [ -n "$devuid" ] && echo "$devuid" >> $tried
        if is_casper_path $mountpoint; then
            echo $mountpoint
            return 0
        else
            umount $mountpoint
        fi
    fi

    if [ -n "${LIVEMEDIA_OFFSET}" ]; then
        losetup -d "${loopdevname}"
    fi
    return 1
}

find_livefs() {
    timeout="${1}"
    # first look at the one specified in the command line
    if [ ! -z "${LIVEMEDIA}" ]; then
        if check_dev "null" "${LIVEMEDIA}"; then
            return 0
        fi
    fi
    # don't start autodetection before timeout has expired
    if [ -n "${LIVEMEDIA_TIMEOUT}" ]; then
        if [ "${timeout}" -lt "${LIVEMEDIA_TIMEOUT}" ]; then
            return 1
        fi
    fi
    # or do the scan of block devices
    for sysblock in $(echo /sys/block/* | tr ' ' '\n' | egrep -v "/(loop|ram|fd)"); do
        devname=$(sys2dev "${sysblock}")
        [ -e "$devname" ] || continue
        fstype=$(get_fstype "${devname}")
        if /lib/udev/cdrom_id ${devname} > /dev/null; then
            if check_dev "null" "${devname}" ; then
                return 0
            fi
        elif is_nice_device "${sysblock}" ; then
            for dev in $(subdevices "${sysblock}"); do
                if check_dev "${dev}" ; then
                    return 0
                fi
            done
        elif [ "${fstype}" = "squashfs" -o \
                "${fstype}" = "ext4" -o \
                "${fstype}" = "ext3" -o \
                "${fstype}" = "ext2" ]; then
            # This is an ugly hack situation, the block device has
            # an image directly on it.  It's hopefully
            # casper, so take it and run with it.
            ln -s "${devname}" "${devname}.${fstype}"
            echo "${devname}.${fstype}"
            return 0
        fi
    done
    return 1
}

set_usplash_timeout() {
    if [ -x /sbin/usplash_write ]; then
        /sbin/usplash_write "TIMEOUT 120"
    fi
}

start_usplash_pulse() {
    if [ -x /sbin/usplash_write ]; then
        /sbin/usplash_write "PULSELOGO"
    fi
}

mountroot() {
    exec 6>&1
    exec 7>&2
    exec > casper.log
    exec 2>&1
    tail -f casper.log >&7 &
    tailpid="$!"

    parse_cmdline

    set_usplash_timeout
    start_usplash_pulse
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-premount"
    run_scripts /scripts/casper-premount
    [ "$quiet" != "y" ] && log_end_msg

    # Needed here too because some things (*cough* udev *cough*)
    # changes the timeout

    set_usplash_timeout
##################################
        # Scan local devices for the image
        i=0
        while [ "$i" -lt 60 ]; do
            livefs_root=$(find_livefs $i)
            if [ "${livefs_root}" ]; then
                break
            fi
            sleep 1
            i="$(($i + 1))"
        done
########################################
    if [ -z "${livefs_root}" ]; then
        panic "Unable to find a medium containing a live file system"
    fi

    mount_images_in_directory "${livefs_root}" "${rootmnt}"

    log_end_msg

    # unionfs-fuse needs /dev to be bind-mounted for the duration of
    # casper-bottom; udev's init script will take care of things after that
    if [ "${UNIONFS}" = unionfs-fuse ]; then
        mount -n -o bind /dev "${rootmnt}/dev"
    fi

    # Open up two fifo's fd's for debconf-communicate to use. Speeds up
    # the Casper process considerably.
    log_begin_msg "Creating debconf-communicate fifo mechanism"
    mkfifo /tmp/debconf-in.fifo
    mkfifo /tmp/debconf-out.fifo

    # Make the template database read-only, so that passthrough debconf
    # instances can write to it directly; otherwise templates are only
    # passed through when necessary.  Use temporary config databases as
    # well; we'll copy their contents back at the end.
    DEBCONF_TMPDIR="$(chroot /root mktemp -dt debconf.XXXXXX)"
    cp -a /root/var/cache/debconf/config.dat "/root$DEBCONF_TMPDIR/"
    cp -a /root/var/cache/debconf/passwords.dat "/root$DEBCONF_TMPDIR/"
    sed "s,^Filename: /var/cache/debconf/\(config\|passwords\).dat$,Filename: $DEBCONF_TMPDIR/\1.dat,; /^Name: templatedb/a\
Readonly: true" /root/etc/debconf.conf >"/root$DEBCONF_TMPDIR/debconf.conf"

    DEBCONF_SYSTEMRC="$DEBCONF_TMPDIR/debconf.conf" chroot /root debconf-communicate -fnoninteractive casper > /tmp/debconf-out.fifo < /tmp/debconf-in.fifo &

    if [ ! -p /tmp/debconf-in.fifo ] || [ ! -p /tmp/debconf-out.fifo ]; then
        log_warning_msg "failed to setup debconf-communicate channel"
    fi
    log_end_msg

    # Order matters!
    # These file descriptors must stay open until we're finished with
    # debconf-communicate.
    exec 4</tmp/debconf-out.fifo 3>/tmp/debconf-in.fifo

    maybe_break casper-bottom
    [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/casper-bottom"
    if [ -d "$mountpoint/boot/Ubuntu/casper-bottom" ];then
        run_scripts $mountpoint/boot/Ubuntu/casper-bottom
        echo "use $mountpoint/boot/Ubuntu/casper-bottom"
    else
        run_scripts /scripts/casper-bottom
    fi
    [ "$quiet" != "y" ] && log_end_msg
    if [ "${UNIONFS}" = unionfs-fuse ]; then
        umount "${rootmnt}/dev"
    fi

    # Close the fd's associated with debconf-communicate.
    exec 3>&- 4<&-
    rm -f /tmp/debconf-in.fifo
    rm -f /tmp/debconf-out.fifo

    # Copy config database changes back to the master files.
    chroot /root debconf-copydb tmpdb config \
	--config=Name:tmpdb --config=Driver:File \
	--config="Filename:$DEBCONF_TMPDIR/config.dat"
    chroot /root debconf-copydb tmpdb passwords \
	--config=Name:tmpdb --config=Driver:File \
	--config="Filename:$DEBCONF_TMPDIR/passwords.dat"
    rm -rf "$DEBCONF_TMPDIR"
    exec 1>&6 6>&-
    exec 2>&7 7>&-
    kill "$tailpid"
    cp casper.log "${rootmnt}/var/log/"
    if [ -f /etc/casper.conf ]; then
        cp /etc/casper.conf "${rootmnt}/etc/"
    fi
}
